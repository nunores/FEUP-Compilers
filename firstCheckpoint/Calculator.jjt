options {
    LOOKAHEAD = 1;
}

PARSER_BEGIN(Calculator)

import java.util.HashMap;
import java.io.*;

public class Calculator {
    public static HashMap<String, Integer> symbols = new HashMap<String, Integer>();

    public static void main(String[] args) throws ParseException {
      if (args.length != 1) {
        System.out.println("Usage: java Calculator input.jmm");
        return;
      }
      FileInputStream file;
      try {
        file = new FileInputStream(args[0]);
      } catch (Exception e) {
        System.err.println("File " + args[0] + " not found");
			  return;
      }
      
      Calculator jvm = new Calculator(file);
      SimpleNode root = jvm.Program();
      
      System.out.println("If you see this, probably its working!");
      
      root.dump("");

    }
}

PARSER_END(Calculator)

SKIP : {
  " "
  | "\r"
  | "\t"
  | "\n"
}

// Keywords

TOKEN: {
    < TRUE: "true" >
	| < FALSE: "false" >
	| < THIS : "this" >
	| < NEW : "new" >
	| < INT: "int" >
	| < IMPORT: "import" >
	| < CLASS: "class" >
	| < EXTENDS: "extends" >
	| < IF: "if" >
	| < VOID: "void" >
	| < ELSE: "else" >
	| < LENGTH: "length" >
	| < MAIN: "main" >
	| < WHILE: "while" >
	| < PUBLIC: "public" >
	| < STATIC: "static" >
	| < STRING: "String" >
	| < RETURN: "return" >
	| < BOOLEAN: "boolean" >

}

// Separators

TOKEN: {
  < COL: "," >
  | < SEMICOL: ";" >
  | < DOT: "." >
  | < LBRACE: "{" >
  | < RBRACE: "}" >
  | < LPAR: "(" >
  | < RPAR: ")" >
  | < LBRACK: "[" >
  | < RBRACK: "]" >
}

// Operations
TOKEN: {
  < AND: "&&" >
  | < OR: "||" >
  | < LESS: "<" >
  | < PLUS: "+" >
  | < MINUS: "-" >
  | < MULT: "*" >
  | < DIV: "/" >
  | < EQ: "=" >
}

TOKEN : {
  < DIGIT: ["0"-"9"] >
  |< INTEGER_LITERAL: "0" | ["1"-"9"] (<DIGIT>)* >
  | < INTARRAY: "int[]" >
  | < STRINGARRAY: "String[]" >
  | < NOT: "!" >
  | < IDENTIFIER: ["A"-"Z","a"-"z","$"](["0"-"9","A"-"Z","a"-"z","_"])* >
}

SimpleNode Program(): {}
{
    ImportDeclaration() ClassDeclaration() <EOF> { return jjtThis; }
}

void ImportDeclaration(): {}
{
    (
        <IMPORT> <IDENTIFIER>
        (
            <DOT> <IDENTIFIER>
        )*
        <SEMICOL>
    )*
}

void ClassDeclaration(): {}
{
    <CLASS> <IDENTIFIER>
    [
        <EXTENDS> <IDENTIFIER>
    ]
    <LBRACE>
    (VarDeclaration())*
    (MethodDeclaration())*
    <RBRACE>
}

void VarDeclaration(): {}
{
    Type() <IDENTIFIER> <SEMICOL>
}

void MethodDeclaration(): {}
{
    <PUBLIC>
    (
        Type() <IDENTIFIER>
        <LPAR>
        [
            Type() <IDENTIFIER>
            (
                <COL> Type() <IDENTIFIER>
            )*
        ]
        <RPAR>

        <LBRACE>
        (LOOKAHEAD(2) VarDeclaration())*
        (LOOKAHEAD(2) Statement())*
        <RETURN> Expression() <SEMICOL>
        <RBRACE>
    )
    |
    (
        <STATIC> <VOID> <MAIN>
        <LPAR>
        <STRINGARRAY>
        <IDENTIFIER>
        <RPAR>

        <LBRACE>
        (LOOKAHEAD(2) VarDeclaration())*
        (LOOKAHEAD(2) Statement())*
        <RBRACE>
    )
}

void Type(): {}
{
    <INTARRAY>
    | <BOOLEAN>
    | <INT>
    | <IDENTIFIER>
}

void Statement(): {}
{
    (
        <LBRACE>
        (Statement())*
        <RBRACE>
    )
    |
    (   <IF> <LPAR> Expression() <RPAR> Statement()
        <ELSE> Statement()
    )
    |
    (
        <WHILE> <LPAR> Expression() <RPAR>
        Statement()
    )
    |
    (
        LOOKAHEAD(2) <IDENTIFIER> <EQ> Expression() <SEMICOL>
        |
        LOOKAHEAD(2) <IDENTIFIER> <LBRACK> Expression() <RBRACK> <EQ> Expression() <SEMICOL>
    )
}

void Expression() #void: {}
{
    And()
}

void And() #void: {}
{
    Less() (LOOKAHEAD(2) <AND> Less() #And(2))*
}

void Less() #void: {} 
{
	Plus() (LOOKAHEAD(2) <LESS> Plus() #Less(2))*
}

void Plus() #void: {} 
{
	Minus() (LOOKAHEAD(2) <PLUS> Minus() #Plus(2))*
}

void Minus() #void: {} 
{
	Mult() (LOOKAHEAD(2) <MINUS> Mult() #Minus(2))*
}

void Mult() #void: {}
{
	Div() (LOOKAHEAD(2) <MULT> Div() #Mult(2))*
}

void Div() #void: {}
{
    Rest() (LOOKAHEAD(2) <MULT> Rest() #Mult(2))*
}

void Rest() #void: {}
{

    Terminal()
    |
    TerminalAlternative()
}

void Terminal(): {}
{
	(
    <DIGIT>
    |
    <TRUE>
    |
    <FALSE>
    |
    <IDENTIFIER>
    |
    <THIS>
    |
    <NEW>
    (
        (<INT> <LBRACK> Expression() <RBRACK>)
        |
        (<IDENTIFIER> <LPAR> <RPAR>)
    )
    |
    (<NOT> Expression())
    |
    (<LPAR> Expression() <RPAR> )
    )
    TerminalAlternative()
}

void TerminalAlternative():  {}
{
    ( <LBRACK> Expression() <RBRACK> )
    |
    (
        <DOT>
        (
            <LENGTH>
            |
            (
                <IDENTIFIER> <LPAR>
                [
                    Expression()
                    (<COL> Expression())*
                ]
                <RPAR>
            )
        )
    )
    TerminalAlternative()
}