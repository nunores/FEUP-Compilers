/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Calculator.jj */
/*@egen*/options {
    LOOKAHEAD = 1;
}

PARSER_BEGIN(Calculator)

import java.util.HashMap;
import java.io.*;

public class Calculator/*@bgen(jjtree)*/implements CalculatorTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTCalculatorState jjtree = new JJTCalculatorState();

/*@egen*/
    public static HashMap<String, Integer> symbols = new HashMap<String, Integer>();

    public static void main(String[] args) throws ParseException {
      if (args.length != 1) {
        System.out.println("Usage: java Calculator input.jmm");
        return;
      }
      FileInputStream file;
      try {
        file = new FileInputStream(args[0]);
      } catch (Exception e) {
        System.err.println("File " + args[0] + " not found");
			  return;
      }
      
      Calculator jvm = new Calculator(file);
      SimpleNode root = jvm.Program();
      
      System.out.println("If you see this, probably its working!");
      
      root.dump("");

    }
}

PARSER_END(Calculator)

SKIP : {
  " "
  | "\r"
  | "\t"
  | "\n"
}

// Keywords

TOKEN: {
    < TRUE: "true" >
	| < FALSE: "false" >
	| < THIS : "this" >
	| < NEW : "new" >
	| < INT: "int" >
	| < IMPORT: "import" >
	| < CLASS: "class" >
	| < EXTENDS: "extends" >
	| < IF: "if" >
	| < VOID: "void" >
	| < ELSE: "else" >
	| < LENGTH: "length" >
	| < MAIN: "main" >
	| < WHILE: "while" >
	| < PUBLIC: "public" >
	| < STATIC: "static" >
	| < STRING: "String" >
	| < RETURN: "return" >
	| < BOOLEAN: "boolean" >

}

// Separators

TOKEN: {
  < COL: "," >
  | < SEMICOL: ";" >
  | < DOT: "." >
  | < LBRACE: "{" >
  | < RBRACE: "}" >
  | < LPAR: "(" >
  | < RPAR: ")" >
  | < LBRACK: "[" >
  | < RBRACK: "]" >
}

// Operations
TOKEN: {
  < AND: "&&" >
  | < OR: "||" >
  | < LESS: "<" >
  | < PLUS: "+" >
  | < MINUS: "-" >
  | < MULT: "*" >
  | < DIV: "/" >
  | < EQ: "=" >
}

TOKEN : {
  < DIGIT: ["0"-"9"] >
  |< INTEGER_LITERAL: "0" | ["1"-"9"] (<DIGIT>)* >
  | < INTARRAY: "int[]" >
  | < STRINGARRAY: "String[]" >
  | < NOT: "!" >
  | < IDENTIFIER: ["A"-"Z","a"-"z","$"](["0"-"9","A"-"Z","a"-"z","_"])* >
}

SimpleNode Program(): {/*@bgen(jjtree) Program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Program */
    try {
/*@egen*/
    ImportDeclaration() ClassDeclaration() <EOF>/*@bgen(jjtree)*/
                                                 {
                                                   jjtree.closeNodeScope(jjtn000, true);
                                                   jjtc000 = false;
                                                 }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ImportDeclaration(): {/*@bgen(jjtree) ImportDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTIMPORTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ImportDeclaration */
    try {
/*@egen*/
    (
        <IMPORT> <IDENTIFIER>
        (
            <DOT> <IDENTIFIER>
        )*
        <SEMICOL>
    )*/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ClassDeclaration(): {/*@bgen(jjtree) ClassDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASSDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ClassDeclaration */
    try {
/*@egen*/
    <CLASS> <IDENTIFIER>
    [
        <EXTENDS> <IDENTIFIER>
    ]
    <LBRACE>
    (VarDeclaration())*
    (MethodDeclaration())*
    <RBRACE>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void VarDeclaration(): {/*@bgen(jjtree) VarDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTVARDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VarDeclaration */
    try {
/*@egen*/
    Type() <IDENTIFIER> <SEMICOL>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void MethodDeclaration(): {/*@bgen(jjtree) MethodDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTMETHODDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MethodDeclaration */
    try {
/*@egen*/
    <PUBLIC>
    (
        Type() <IDENTIFIER>
        <LPAR>
        [
            Type() <IDENTIFIER>
            (
                <COL> Type() <IDENTIFIER>
            )*
        ]
        <RPAR>

        <LBRACE>
        (LOOKAHEAD(2) VarDeclaration())*
        (LOOKAHEAD(2) Statement())*
        <RETURN> Expression() <SEMICOL>
        <RBRACE>
    )
    |
    (
        <STATIC> <VOID> <MAIN>
        <LPAR>
        <STRINGARRAY>
        <IDENTIFIER>
        <RPAR>

        <LBRACE>
        (LOOKAHEAD(2) VarDeclaration())*
        (LOOKAHEAD(2) Statement())*
        <RBRACE>
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Type(): {/*@bgen(jjtree) Type */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Type */
    try {
/*@egen*/
    <INTARRAY>
    | <BOOLEAN>
    | <INT>
    | <IDENTIFIER>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Statement(): {/*@bgen(jjtree) Statement */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Statement */
    try {
/*@egen*/
    (
        <LBRACE>
        (Statement())*
        <RBRACE>
    )
    |
    (   <IF> <LPAR> Expression() <RPAR> Statement()
        <ELSE> Statement()
    )
    |
    (
        <WHILE> <LPAR> Expression() <RPAR>
        Statement()
    )
    |
    (
        LOOKAHEAD(2) <IDENTIFIER> <EQ> Expression() <SEMICOL>
        |
        LOOKAHEAD(2) <IDENTIFIER> <LBRACK> Expression() <RBRACK> <EQ> Expression() <SEMICOL>
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Expression()      : {}
{
    And()
}

void And()      : {}
{
    Less() (LOOKAHEAD(2) <AND>/*@bgen(jjtree) #And( 2) */
                               {
                                 SimpleNode jjtn001 = new SimpleNode(JJTAND);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
                               }
                               try {
/*@egen*/ Less()/*@bgen(jjtree)*/
                               } catch (Throwable jjte001) {
                                 if (jjtc001) {
                                   jjtree.clearNodeScope(jjtn001);
                                   jjtc001 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte001 instanceof RuntimeException) {
                                   throw (RuntimeException)jjte001;
                                 }
                                 if (jjte001 instanceof ParseException) {
                                   throw (ParseException)jjte001;
                                 }
                                 throw (Error)jjte001;
                               } finally {
                                 if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001,  2);
                                 }
                               }
/*@egen*/        )*
}

void Less()      : {} 
{
	Plus() (LOOKAHEAD(2) <LESS>/*@bgen(jjtree) #Less( 2) */
                                    {
                                      SimpleNode jjtn001 = new SimpleNode(JJTLESS);
                                      boolean jjtc001 = true;
                                      jjtree.openNodeScope(jjtn001);
                                    }
                                    try {
/*@egen*/ Plus()/*@bgen(jjtree)*/
                                    } catch (Throwable jjte001) {
                                      if (jjtc001) {
                                        jjtree.clearNodeScope(jjtn001);
                                        jjtc001 = false;
                                      } else {
                                        jjtree.popNode();
                                      }
                                      if (jjte001 instanceof RuntimeException) {
                                        throw (RuntimeException)jjte001;
                                      }
                                      if (jjte001 instanceof ParseException) {
                                        throw (ParseException)jjte001;
                                      }
                                      throw (Error)jjte001;
                                    } finally {
                                      if (jjtc001) {
                                        jjtree.closeNodeScope(jjtn001,  2);
                                      }
                                    }
/*@egen*/         )*
}

void Plus()      : {} 
{
	Minus() (LOOKAHEAD(2) <PLUS>/*@bgen(jjtree) #Plus( 2) */
                                     {
                                       SimpleNode jjtn001 = new SimpleNode(JJTPLUS);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
                                     }
                                     try {
/*@egen*/ Minus()/*@bgen(jjtree)*/
                                     } catch (Throwable jjte001) {
                                       if (jjtc001) {
                                         jjtree.clearNodeScope(jjtn001);
                                         jjtc001 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte001 instanceof RuntimeException) {
                                         throw (RuntimeException)jjte001;
                                       }
                                       if (jjte001 instanceof ParseException) {
                                         throw (ParseException)jjte001;
                                       }
                                       throw (Error)jjte001;
                                     } finally {
                                       if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001,  2);
                                       }
                                     }
/*@egen*/         )*
}

void Minus()      : {} 
{
	Mult() (LOOKAHEAD(2) <MINUS>/*@bgen(jjtree) #Minus( 2) */
                                     {
                                       SimpleNode jjtn001 = new SimpleNode(JJTMINUS);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
                                     }
                                     try {
/*@egen*/ Mult()/*@bgen(jjtree)*/
                                     } catch (Throwable jjte001) {
                                       if (jjtc001) {
                                         jjtree.clearNodeScope(jjtn001);
                                         jjtc001 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte001 instanceof RuntimeException) {
                                         throw (RuntimeException)jjte001;
                                       }
                                       if (jjte001 instanceof ParseException) {
                                         throw (ParseException)jjte001;
                                       }
                                       throw (Error)jjte001;
                                     } finally {
                                       if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001,  2);
                                       }
                                     }
/*@egen*/          )*
}

void Mult()      : {}
{
	Div() (LOOKAHEAD(2) <MULT>/*@bgen(jjtree) #Mult( 2) */
                                   {
                                     SimpleNode jjtn001 = new SimpleNode(JJTMULT);
                                     boolean jjtc001 = true;
                                     jjtree.openNodeScope(jjtn001);
                                   }
                                   try {
/*@egen*/ Div()/*@bgen(jjtree)*/
                                   } catch (Throwable jjte001) {
                                     if (jjtc001) {
                                       jjtree.clearNodeScope(jjtn001);
                                       jjtc001 = false;
                                     } else {
                                       jjtree.popNode();
                                     }
                                     if (jjte001 instanceof RuntimeException) {
                                       throw (RuntimeException)jjte001;
                                     }
                                     if (jjte001 instanceof ParseException) {
                                       throw (ParseException)jjte001;
                                     }
                                     throw (Error)jjte001;
                                   } finally {
                                     if (jjtc001) {
                                       jjtree.closeNodeScope(jjtn001,  2);
                                     }
                                   }
/*@egen*/         )*
}

void Div()      : {}
{
    Rest() (LOOKAHEAD(2) <MULT>/*@bgen(jjtree) #Mult( 2) */
                                {
                                  SimpleNode jjtn001 = new SimpleNode(JJTMULT);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
                                }
                                try {
/*@egen*/ Rest()/*@bgen(jjtree)*/
                                } catch (Throwable jjte001) {
                                  if (jjtc001) {
                                    jjtree.clearNodeScope(jjtn001);
                                    jjtc001 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte001 instanceof RuntimeException) {
                                    throw (RuntimeException)jjte001;
                                  }
                                  if (jjte001 instanceof ParseException) {
                                    throw (ParseException)jjte001;
                                  }
                                  throw (Error)jjte001;
                                } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001,  2);
                                  }
                                }
/*@egen*/         )*
}

void Rest()      : {}
{

    Terminal()
    |
    TerminalAlternative()
}

void Terminal(): {/*@bgen(jjtree) Terminal */
  SimpleNode jjtn000 = new SimpleNode(JJTTERMINAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Terminal */
        try {
/*@egen*/
	(
    <DIGIT>
    |
    <TRUE>
    |
    <FALSE>
    |
    <IDENTIFIER>
    |
    <THIS>
    |
    <NEW>
    (
        (<INT> <LBRACK> Expression() <RBRACK>)
        |
        (<IDENTIFIER> <LPAR> <RPAR>)
    )
    |
    (<NOT> Expression())
    |
    (<LPAR> Expression() <RPAR> )
    )
    TerminalAlternative()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void TerminalAlternative():  {/*@bgen(jjtree) TerminalAlternative */
  SimpleNode jjtn000 = new SimpleNode(JJTTERMINALALTERNATIVE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TerminalAlternative */
    try {
/*@egen*/
    ( <LBRACK> Expression() <RBRACK> )
    |
    (
        <DOT>
        (
            <LENGTH>
            |
            (
                <IDENTIFIER> <LPAR>
                [
                    Expression()
                    (<COL> Expression())*
                ]
                <RPAR>
            )
        )
    )
    TerminalAlternative()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}